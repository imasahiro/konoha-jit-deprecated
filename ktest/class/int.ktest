// Mini UnitTest for Int Method
// Author: Kimio Kuramitsu <kimio at sourceforge.jp>
// ADD Your name here

### int literal
>>> 0
0
>>> 1
1
>>> -1
-1
>>> 111111111111111111111111111111111
 - [(eval):1]:(warning) int overflow: 111111111111111111111111111111111
0

### int hexical literal
>>> 0x0
0
>>> 0x1
1
>>> 0xf
15
>>> 0xff
255

### int binary literal
>>> 0b0
0
>>> 0b1
1
>>> 0b10
2
>>> 0b11
3

### int variable
>>> int i;
>>> i
0
>>> i = 1
1
>>> i = i
1

>>> Int i = 0;
>>> i
0
>>> i = 1
1
>>> i = i
1

### type inference of int
>>> Int i;
>>> newvar_i = 0
0
>>> typeof(newvar_i)
konoha.Int
>>> newvar_i2 = i
>>> typeof(newvar_i2)
konoha.Int

### int negative operator
>>> i0 = 0
>>> i1 = 1
>>> -1
-1
>>> -(1)
-1
>>> -i0
0
>>> -i1
-1

### int i++ operator
>>> i = 0
>>> i
0
>>> i++
0
>>> i
1
>>> i++
1
>>> i
2

### int ++i operator
>>> i = 0
>>> i
0
>>> ++i
1
>>> i
1
>>> ++i
2
>>> i
2

### int i-- operator
>>> 1
@ADD THIS TEST
### int --i operator
>>> 1
@ADD THIS TEST

### int + operator
>>> i0 = 0
>>> i1 = 1
>>> i5 = 5
>>> 0 + 1
1
>>> 0 + i1
1
>>> i0 + 1
1
>>> i0 + i1
1
>>> i0 + i1 + i5
6
>>> i0 + 0 + 1 + 5 + i1 + i5
12

### int - operator
>>> i0 = 0
>>> i1 = 1
>>> i5 = 5
>>> 0 - 1
-1
>>> 0 - i1
-1
>>> i0 - 1
-1
>>> i0 - i1
-1
>>> i0 - i1 - i5
-6
>>> i0 - 0 - 1 - 5 - i1 - i5
-12

### int * operator
>>> 1
@ADD THIS TEST
### int / operator
>>> 1
@ADD THIS TEST
### int % operator
>>> 1
@ADD THIS TEST
### int mod operator
>>> 1
@ADD THIS TEST

### int | operator
>>> 1
@ADD THIS TEST
### int & operator
>>> 1
@ADD THIS TEST
### int ^ operator
>>> 1
@ADD THIS TEST
### int << operator
>>> 1
@ADD THIS TEST
### int >> operator
>>> 1
@ADD THIS TEST

### int N + N with -N
>>> i1 = 1
>>> i2 = 2
>>> -i1 + i2
1
>>> i1 + -i2
-1

### int N + N with N++
>>> i1 = 1
>>> i2 = 2
>>> 1
@ADD THIS THEST

### int N + N with ++N
>>> i1 = 1
>>> i2 = 2
>>> 1
@ADD THIS THEST

### int N + N with N - N
>>> i1 = 1
>>> i2 = 2
>>> i3 = 3
>>> i1 + i2 - i3
0
>>> i1 -i3 + i2
0

// ADD EVERY OPERATOR AS THESE


### int single division 
>>> 100 / 10
10

### int multiple division 
>>> 100 / 10 / 10
1

### int multiple division 
>>> 100 / (10 / 10)
100


### int multi add
>>> 1 + 2 + 3
6

### int add (with plus operator)
>>> 1 + + + 2
3

### int multi sub
>>> 1 - 2 - 3
-4

### int sub (with minus operator)
>>> 1 - - - 2
-1

### int mul (with plus and minus operator)
>>> 1 * - - + - -2
2

### int div (with plus and minus operator)
>>> 5 / - - - - - +3
-1

### int mod (with plus and minus operator)
>>> 5 % -3
2

### int mixing calc
>>> 7 + 1 - 6 * 2 / 5 % 3 + 4
10

### int mixing calc
>>> 7 - (1 % 6 * (2 / 5 + 3) - 4)
8


// variable
### int i = 0
>>> int i = 0
0

### (i++) + 3
>>> (i++) + 3
3

### (i++) + (i++)
>>> (i++) + (i++)
3

### (i++) + (i--)
>>> (i++) + (i--)
7

### (i--) + (i++)
>>> (i--) + (i++)
5

// bit operate
### 0b... to int
>>> i = 0b101
5

### 0x... to int
>>> i = 0x12
18

### and operator
>>> 0b011 & 0b110
2

### or operator
>>> 0b101 | 0b010
7

### not operator (cannot eval this)
>>> ~0b101
-6

### eor operator (cannot eval this)
>>> 0b101 ^ 0b010
7

### bit operator priority ( "|" < "&" )
>>> 0b101 | 0b010 & 0b110
7

//### bit operator priority
//>>>  0b101 | (0b010 & 0b110)
//7

//### bit operator priority
//>>> (0b101 | 0b010) & 0b110
//6

### shift operator
>>> 0b011 << 1
6

### shift operator priority ( "&" < "<<" )
>>> 0b011 << 1 & 0b110
6

### multi left shift
>>> 0b101 << 1 << 2
40

### multi right shift
>>> 0b10100 >> 1 >> 2
5

### mixing shift
>>> 0b101 << 3 >> 2
10

### minus shift
>>> 0b101 << -1
-9223372036854775808

### shift large size
>>> 0b111 >> 64
0

// Int upper/lower boundary test

### Int.MAX
>>> max = Int.MAX
9223372036854775807

### Int.MIN
>>> min = Int.MIN
-9223372036854775808

### Int boundary operation
// I'm not sure these test are meaningful. (Kimio)
>>> max + max
-2
>>> max + min
-1
>>> min + max
-1
>>> min + min
0
>>> max - max
0
>>> max - min
-1
>>> min - max
1
>>> min - min
0
>>> max * max
1
>>> max * min
-9223372036854775808
>>> min * max
-9223372036854775808
>>> min * min
0
>>> max / max
1
>>> max / min
0
>>> min / max
-1
>>> min / min
1
>>> max++
9223372036854775807
>>> max
-9223372036854775808
>>> min--
-9223372036854775808
>>> min
9223372036854775807

// Mini UnitTest for Int Method
// Author: Kimio Kuramitsu <kimio at sourceforge.jp>

### Int.format("%d")
>>> i123 = 123
>>> (123).format("%d")
"123"
>>> (i123).format("%d")
"123"
>>> (-i123).format("%d")
"-123"
>>> (i123).format("%#d")
"123"
>>> (i123).format("%6d")
"   123"
>>> (i123).format("%06d")
"000123"
>>> (i123).format("%-6d")
"123   "
>>> (i123).format("%-06d")
"123   "
>>> (i123).format("%+6d")
"  +123"
>>> (-i123).format("%+6d")
"  -123"

### Int.format("%u")
>>> i1 = 1
>>> (i1).format("%u")
"1"
>>> (-i1).format("%u")
"18446744073709551615"

### Int.format("%x")
>>> i1 = 1
>>> (10).format("%x")
"a"
>>> (16).format("%x")
"10"
>>> (10).format("%#x")
"0xa"
>>> (16).format("%#x")
"0x10"
>>> (-1).format("%x")
"ffffffffffffffff"
>>> (-1).format("%#x")
"0xffffffffffffffff"

### int random number
>>> r1 = Int.random();
>>> r2 = Int.random();
>>> r1 == r2  // this depends on random seeds
false

### Random number of upper bound
>>> c = 0
>>> for(i = 0; i < 1000; i++) {
...   r = Int.random(1000);
...   if(r >= 1000) c++;
... }
>>> c
0

