// Array<Float> Test
// TODO
// ** Array.opCASE
// ** Array.opHAS

### Array<Float> literal
>>> Float[] a;
[]
>>> Float[] a = [0.000000];
[0.000000]
>>> Array<Float> a = [0.000000];
[0.000000]
>>> Float[] a = [4.000000], b = [2.000000];
[4.000000]
[2.000000]

>>> Float[] a = [0.000000];
[0.000000]
>>> (a[0] == 0.000000 && a.size == 1)
true
>>> a = [
... 2.000000,
... 2.000000,];
>>> a.size == 2
true
>>> [1.000000,2.000000,,3.000000].size == 3
true
>>> a = new Float[](10);
[] @TODO
>>> a = new Float[10]
[0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000]

### Array<Float> opSEND
>>> Float[] a = [0.000000];
>>> Float[] b = [1.000000];
>>> a << 1.000000;
>>> a
[0.000000, 1.000000]
>>> a << b[0];
>>> a
[0.000000, 1.000000, 1.000000]
>> 2.000000 + a[1];
3.000000

//>>> a << b;
// @Error

### Array<Float> getter
>>> a = [1.000000];
>>> a.get(0)
1.000000
>>> a.get(0) + 2.000000
3.000000
>>> boolean f(Any v) { return v == 0.000000; }
>>> f([0.000000].get(0));
true

### Array<Float> setter
>>> a = [1.000000];
>>> a.set(0, 1.000000)
1.000000
>>> a.get(0) + 2.000000
3.000000
>>> a.set(0,)
0.000000
>>> a
[0.000000]

//>>> a.set()
//0.000000 /* TODO */

### Array<Float> add
>>> a = [1.000000];
>>> a.add(2.000000)
[1.000000, 2.000000]
>>> a.get(0) + 2.000000
3.000000

//### Array<Float>..
//>>> a = [1.000000, 2.000000, 3.000000];
//>>> a..
//1.000000
//2.000000
//3.000000

### Array<Float> until/to
>>> a = [1.000000, 2.000000, 3.000000, 4.000000, 5.000000];
>>> a[1 until 3];
[2.000000, 3.000000]
>>> a[1 : 3];
[2.000000, 3.000000]
>>> a[1 to 3];
[2.000000, 3.000000, 4.000000]
>>> a[1 : 3] << 1;
[2.000000, 3.000000, 1.000000]
>>> a[0] == 1.000000 && a[1] == 2.000000 & a[2] == 3.000000 && a[3] == 4.000000 && a[4] == 5.000000;
true


