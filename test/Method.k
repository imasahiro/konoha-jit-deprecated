/*
 * this Makefile is generated from konoha/gensrc/gen_automake.k
 * Copyright (C) 2009 Masahiro Ide.
 */
test "void Bytes.putc(Int! char)" {
void Bytes.putc(Int! char)
}

test "void Bytes.write(Bytes! buf, Int? offset, Int? length)" {
void Bytes.write(Bytes! buf, Int? offset, Int? length)
}

test "void Bytes.add(Bytes! buf, Int? offset, Int? length)" {
void Bytes.add(Bytes! buf, Int? offset, Int? length)
}

test "void Bytes.memcpy(Int offset, Bytes! buf, Int? offset, Int? length)" {
void Bytes.memcpy(Int offset, Bytes! buf, Int? offset, Int? length)
}

test "void Array.add(T1 value)" {
void Array.add(T1 value)
}

test "void IArray.add(Int! value)" {
void IArray.add(Int! value)
}

test "void FArray.add(Float! value)" {
void FArray.add(Float! value)
}

test "void Array.opAppend(T1 value, ...)" {
void Array.opAppend(T1 value, ...)
}

test "void IArray.opAppend(Int! value, ...)" {
void IArray.opAppend(Int! value, ...)
}

test "void FArray.opAppend(Float! value, ...)" {
void FArray.opAppend(Float! value, ...)
}

test "void Array.insert(Int! n, T1! value)" {
void Array.insert(Int! n, T1! value)
}

test "void IArray.insert(Int! n, Int! value)" {
void IArray.insert(Int! n, Int! value)
}

test "void FArray.insert(Int! n, Float! value)" {
void FArray.insert(Int! n, Float! value)
}

test "void Array.clear()" {
void Array.clear()
}

test "void IArray.clear()" {
void IArray.clear()
}

test "void FArray.clear()" {
void FArray.clear()
}

test "void Array.remove(Int! n)" {
void Array.remove(Int! n)
}

test "void IArray.remove(Int! n)" {
void IArray.remove(Int! n)
}

test "void FArray.remove(Int! n)" {
void FArray.remove(Int! n)
}

test "T1! Array.pop()" {
T1! Array.pop()
}

test "T1! IArray.pop()" {
T1! IArray.pop()
}

test "T1! FArray.pop()" {
T1! FArray.pop()
}

test "Int! Array.indexOf(T1 value)" {
Int! Array.indexOf(T1 value)
}

test "Int! IArray.indexOf(Int! value)" {
Int! IArray.indexOf(Int! value)
}

test "Int! FArray.indexOf(Float! value)" {
Int! FArray.indexOf(Float! value)
}

test "Int! Array.lastIndexOf(T1 value)" {
Int! Array.lastIndexOf(T1 value)
}

test "Int! IArray.lastIndexOf(Int! value)" {
Int! IArray.lastIndexOf(Int! value)
}

test "Int! FArray.lastIndexOf(Float! value)" {
Int! FArray.lastIndexOf(Float! value)
}

test "void Array.sort()" {
void Array.sort()
}

test "void IArray.sort()" {
void IArray.sort()
}

test "void FArray.sort()" {
void FArray.sort()
}

test "void Array.reverse()" {
void Array.reverse()
}

test "void IArray.reverse()" {
void IArray.reverse()
}

test "void FArray.reverse()" {
void FArray.reverse()
}

test "void Array.swap(Int! m, Int! n)" {
void Array.swap(Int! m, Int! n)
}

test "void IArray.swap(Int! m, Int! n)" {
void IArray.swap(Int! m, Int! n)
}

test "void FArray.swap(Int! m, Int! n)" {
void FArray.swap(Int! m, Int! n)
}

test "void Array.shuffle()" {
void Array.shuffle()
}

test "void IArray.shuffle()" {
void IArray.shuffle()
}

test "void FArray.shuffle()" {
void FArray.shuffle()
}

test "This! Array.new:array2D(Int! x, Int! y)" {
This! Array.new:array2D(Int! x, Int! y)
}

test "This! Array.new:array3D(Int! x, Int! y, Int! z)" {
This! Array.new:array3D(Int! x, Int! y, Int! z)
}

test "T1 Array.get2D(Int! x, Int! y)" {
T1 Array.get2D(Int! x, Int! y)
}

test "T1 Array.get3D(Int! x, Int! y, Int! z)" {
T1 Array.get3D(Int! x, Int! y, Int! z)
}

test "void Array.set2D(Int! x, Int! y, T1 value)" {
void Array.set2D(Int! x, Int! y, T1 value)
}

test "void Array.set3D(Int! x, Int! y, Int! z, T1 value)" {
void Array.set3D(Int! x, Int! y, Int! z, T1 value)
}

test "This! IArray.new:array2D(Int! x, Int! y)" {
This! IArray.new:array2D(Int! x, Int! y)
}

test "This! IArray.new:array3D(Int! x, Int! y, Int! z)" {
This! IArray.new:array3D(Int! x, Int! y, Int! z)
}

test "T1! IArray.get2D(Int! x, Int! y)" {
T1! IArray.get2D(Int! x, Int! y)
}

test "T1! IArray.get3D(Int! x, Int! y, Int! z)" {
T1! IArray.get3D(Int! x, Int! y, Int! z)
}

test "void IArray.set2D(Int! x, Int! y, T1! value)" {
void IArray.set2D(Int! x, Int! y, T1! value)
}

test "void IArray.set3D(Int! x, Int! y, Int! z, T1! value)" {
void IArray.set3D(Int! x, Int! y, Int! z, T1! value)
}

test "This! FArray.new:array2D(Int! x, Int! y)" {
This! FArray.new:array2D(Int! x, Int! y)
}

test "This! FArray.new:array3D(Int! x, Int! y, Int! z)" {
This! FArray.new:array3D(Int! x, Int! y, Int! z)
}

test "T1! FArray.get2D(Int! x, Int! y)" {
T1! FArray.get2D(Int! x, Int! y)
}

test "T1! FArray.get3D(Int! x, Int! y, Int! z)" {
T1! FArray.get3D(Int! x, Int! y, Int! z)
}

test "void FArray.set2D(Int! x, Int! y, T1 value)" {
void FArray.set2D(Int! x, Int! y, T1 value)
}

test "void FArray.set3D(Int! x, Int! y, Int! z, T1 value)" {
void FArray.set3D(Int! x, Int! y, Int! z, T1 value)
}

test "void Token.%s(OutputStream w, String m)" {
void Token.%s(OutputStream w, String m)
}

test "void Token.%k(OutputStream w, String m)" {
void Token.%k(OutputStream w, String m)
}

test "void Token.%dump(OutputStream w, String m)" {
void Token.%dump(OutputStream w, String m)
}

test "void Stmt.%s(OutputStream w, String m)" {
void Stmt.%s(OutputStream w, String m)
}

test "void Stmt.%dump(OutputStream w, String m)" {
void Stmt.%dump(OutputStream w, String m)
}

test "This! Connection.new(String! urn)" {
This! Connection.new(String! urn)
}

test "ResultSet! Connection.query(String! query)" {
ResultSet! Connection.query(String! query)
}

test "void Connection.exec(String! query)" {
void Connection.exec(String! query)
}

test "void Connection.close()" {
void Connection.close()
}

test "Int! ResultSet.getSize()" {
Int! ResultSet.getSize()
}

test "Boolean! ResultSet.next()" {
Boolean! ResultSet.next()
}

test "String! ResultSet.getName(Int! n)" {
String! ResultSet.getName(Int! n)
}

test "Int ResultSet.getInt(Any n)" {
Int ResultSet.getInt(Any n)
}

test "Float ResultSet.getFloat(Any n)" {
Float ResultSet.getFloat(Any n)
}

test "String ResultSet.getString(Any n)" {
String ResultSet.getString(Any n)
}

test "Any ResultSet.get(Any n)" {
Any ResultSet.get(Any n)
}

test "void ResultSet.%dump(OutputStream w, String? m)" {
void ResultSet.%dump(OutputStream w, String? m)
}

test "void ResultSet.close()" {
void ResultSet.close()
}

test "Boolean! DictMap.opHas(String! key)" {
Boolean! DictMap.opHas(String! key)
}

test "T1? DictMap.get(String! key)" {
T1? DictMap.get(String! key)
}

test "void DictMap.set(String! key, T1? value)" {
void DictMap.set(String! key, T1? value)
}

test "void DictMap.remove(String! key)" {
void DictMap.remove(String! key)
}

test "void DictMap.clear()" {
void DictMap.clear()
}

test "void Object.%empty(OutputStream w, String? fmt)" {
void Object.%empty(OutputStream w, String? fmt)
}

test "void Object.%s(OutputStream w, String? fmt)" {
void Object.%s(OutputStream w, String? fmt)
}

test "void Boolean.%s(OutputStream w, String? fmt)" {
void Boolean.%s(OutputStream w, String? fmt)
}

test "void Boolean.%k(OutputStream w, String? fmt)" {
void Boolean.%k(OutputStream w, String? fmt)
}

test "void Boolean.%data(OutputStream w, String? fmt)" {
void Boolean.%data(OutputStream w, String? fmt)
}

test "void Boolean.%dump(OutputStream w, String? fmt)" {
void Boolean.%dump(OutputStream w, String? fmt)
}

test "void Int.%s(OutputStream w, String? fmt)" {
void Int.%s(OutputStream w, String? fmt)
}

test "void String.%s(OutputStream w, String? fmt)" {
void String.%s(OutputStream w, String? fmt)
}

test "void Bytes.%s(OutputStream w, String? fmt)" {
void Bytes.%s(OutputStream w, String? fmt)
}

test "void Regex.%s(OutputStream w, String? fmt)" {
void Regex.%s(OutputStream w, String? fmt)
}

test "void Class.%s(OutputStream w, String? fmt)" {
void Class.%s(OutputStream w, String? fmt)
}

test "void Method.%s(OutputStream w, String? fmt)" {
void Method.%s(OutputStream w, String? fmt)
}

test "void Exception.%s(OutputStream w, String? fmt)" {
void Exception.%s(OutputStream w, String? fmt)
}

test "void Object.%k(OutputStream w, String? fmt)" {
void Object.%k(OutputStream w, String? fmt)
}

test "void Int.%k(OutputStream w, String? fmt)" {
void Int.%k(OutputStream w, String? fmt)
}

test "void Int.%data(OutputStream w, String? fmt)" {
void Int.%data(OutputStream w, String? fmt)
}

test "void Int.%dump(OutputStream w, String? fmt)" {
void Int.%dump(OutputStream w, String? fmt)
}

test "void Float.%k(OutputStream w, String? fmt)" {
void Float.%k(OutputStream w, String? fmt)
}

test "void Float.%data(OutputStream w, String? fmt)" {
void Float.%data(OutputStream w, String? fmt)
}

test "void Float.%dump(OutputStream w, String? fmt)" {
void Float.%dump(OutputStream w, String? fmt)
}

test "void String.%k(OutputStream w, String? fmt)" {
void String.%k(OutputStream w, String? fmt)
}

test "void Iterator.%k(OutputStream w, String? fmt)" {
void Iterator.%k(OutputStream w, String? fmt)
}

test "void Pair.%k(OutputStream w, String? fmt)" {
void Pair.%k(OutputStream w, String? fmt)
}

test "void Tuple.%k(OutputStream w, String? fmt)" {
void Tuple.%k(OutputStream w, String? fmt)
}

test "void Range.%k(OutputStream w, String? fmt)" {
void Range.%k(OutputStream w, String? fmt)
}

test "void Array.%k(OutputStream w, String? fmt)" {
void Array.%k(OutputStream w, String? fmt)
}

test "void IArray.%k(OutputStream w, String? fmt)" {
void IArray.%k(OutputStream w, String? fmt)
}

test "void FArray.%k(OutputStream w, String? fmt)" {
void FArray.%k(OutputStream w, String? fmt)
}

test "void DictMap.%k(OutputStream w, String? fmt)" {
void DictMap.%k(OutputStream w, String? fmt)
}

test "void DictSet.%k(OutputStream w, String? fmt)" {
void DictSet.%k(OutputStream w, String? fmt)
}

test "void DictIdx.%k(OutputStream w, String? fmt)" {
void DictIdx.%k(OutputStream w, String? fmt)
}

test "void HashMap.%k(OutputStream w, String? fmt)" {
void HashMap.%k(OutputStream w, String? fmt)
}

test "void Class.%k(OutputStream w, String? fmt)" {
void Class.%k(OutputStream w, String? fmt)
}

test "void Method.%k(OutputStream w, String? fmt)" {
void Method.%k(OutputStream w, String? fmt)
}

test "void Mapper.%k(OutputStream w, String? fmt)" {
void Mapper.%k(OutputStream w, String? fmt)
}

test "void Exception.%k(OutputStream w, String? fmt)" {
void Exception.%k(OutputStream w, String? fmt)
}

test "void InputStream.%k(OutputStream w, String? fmt)" {
void InputStream.%k(OutputStream w, String? fmt)
}

test "void OutputStream.%k(OutputStream w, String? fmt)" {
void OutputStream.%k(OutputStream w, String? fmt)
}

test "void Script.%k(OutputStream w, String? fmt)" {
void Script.%k(OutputStream w, String? fmt)
}

test "void Any.%s(OutputStream w, String? fmt)" {
void Any.%s(OutputStream w, String? fmt)
}

test "void Any.%k(OutputStream w, String? fmt)" {
void Any.%k(OutputStream w, String? fmt)
}

test "void Object.%dump(OutputStream w, String? fmt)" {
void Object.%dump(OutputStream w, String? fmt)
}

test "void Bytes.%dump(OutputStream w, String? fmt)" {
void Bytes.%dump(OutputStream w, String? fmt)
}

test "void Class.%dump(OutputStream w, String? fmt)" {
void Class.%dump(OutputStream w, String? fmt)
}

test "void ClassMap.%dump(OutputStream w, String? fmt)" {
void ClassMap.%dump(OutputStream w, String? fmt)
}

test "void Method.%dump(OutputStream w, String? fmt)" {
void Method.%dump(OutputStream w, String? fmt)
}

test "void Exception.%dump(OutputStream w, String? fmt)" {
void Exception.%dump(OutputStream w, String? fmt)
}

test "void Object.%data(OutputStream w, String? fmt)" {
void Object.%data(OutputStream w, String? fmt)
}

test "void String.%data(OutputStream w, String? fmt)" {
void String.%data(OutputStream w, String? fmt)
}

test "void Bytes.%data(OutputStream w, String? fmt)" {
void Bytes.%data(OutputStream w, String? fmt)
}

test "void Array.%data(OutputStream w, String? fmt)" {
void Array.%data(OutputStream w, String? fmt)
}

test "void IArray.%data(OutputStream w, String? fmt)" {
void IArray.%data(OutputStream w, String? fmt)
}

test "void FArray.%data(OutputStream w, String? fmt)" {
void FArray.%data(OutputStream w, String? fmt)
}

test "void DictMap.%data(OutputStream w, String? fmt)" {
void DictMap.%data(OutputStream w, String? fmt)
}

test "void Exception.%data(OutputStream w, String? fmt)" {
void Exception.%data(OutputStream w, String? fmt)
}

test "void Class.%man(OutputStream w, String? fmt)" {
void Class.%man(OutputStream w, String? fmt)
}

test "void Object.%man(OutputStream w, String? fmt)" {
void Object.%man(OutputStream w, String? fmt)
}

test "void Object.%p(OutputStream w, String? fmt)" {
void Object.%p(OutputStream w, String? fmt)
}

test "void Int.%c(OutputStream w, String? fmt)" {
void Int.%c(OutputStream w, String? fmt)
}

test "void Int.%d(OutputStream w, String? fmt)" {
void Int.%d(OutputStream w, String? fmt)
}

test "void Int.%u(OutputStream w, String? fmt)" {
void Int.%u(OutputStream w, String? fmt)
}

test "void Int.%f(OutputStream w, String? fmt)" {
void Int.%f(OutputStream w, String? fmt)
}

test "void Int.%x(OutputStream w, String? fmt)" {
void Int.%x(OutputStream w, String? fmt)
}

test "void Int.%bits(OutputStream w, String? fmt)" {
void Int.%bits(OutputStream w, String? fmt)
}

test "void Float.%s(OutputStream w, String? fmt)" {
void Float.%s(OutputStream w, String? fmt)
}

test "void Float.%d(OutputStream w, String? fmt)" {
void Float.%d(OutputStream w, String? fmt)
}

test "void Float.%f(OutputStream w, String? fmt)" {
void Float.%f(OutputStream w, String? fmt)
}

test "void Float.%bits(OutputStream w, String? fmt)" {
void Float.%bits(OutputStream w, String? fmt)
}

test "This! HashMap.new(Int? initCapacity)" {
This! HashMap.new(Int? initCapacity)
}

test "T2 HashMap.get(T1 key)" {
T2 HashMap.get(T1 key)
}

test "Boolean! HashMap.opHas(T1 key)" {
Boolean! HashMap.opHas(T1 key)
}

test "void HashMap.remove(T1 key)" {
void HashMap.remove(T1 key)
}

test "void HashMap.set(T1! key, T2 value)" {
void HashMap.set(T1! key, T2 value)
}

test "String.. String.opItr()" {
String.. String.opItr()
}

test "T1.. Range.opItr()" {
T1.. Range.opItr()
}

test "T1.. Array.opItr()" {
T1.. Array.opItr()
}

test "T1.. IArray.opItr()" {
T1.. IArray.opItr()
}

test "T1.. FArray.opItr()" {
T1.. FArray.opItr()
}

test "String.. DictMap.opItr()" {
String.. DictMap.opItr()
}

test "PairST1.. DictMap.opItr:2()" {
PairST1.. DictMap.opItr:2()
}

test "T1.. HashMap.opItr()" {
T1.. HashMap.opItr()
}

test "PairT1T2.. HashMap.opItr:2()" {
PairT1T2.. HashMap.opItr:2()
}

test "This.. Object.opItr()" {
This.. Object.opItr()
}

test "Boolean! Script.isStmt(String! script)" {
Boolean! Script.isStmt(String! script)
}

test "void Script.eval(String script)" {
void Script.eval(String script)
}

test "String Script.readLine(String prompt)" {
String Script.readLine(String prompt)
}

test "void Script.addHistory(String! line)" {
void Script.addHistory(String! line)
}

test "void System.setMethodTypingListener(Closure c, String anno)" {
void System.setMethodTypingListener(Closure c, String anno)
}

test "void System.setMethodCompilationListener(Closure c, String anno)" {
void System.setMethodCompilationListener(Closure c, String anno)
}

test "int Method.getProfTime()" {
int Method.getProfTime()
}

test "int Method.getProfCount()" {
int Method.getProfCount()
}

test "void Array.sortByClosure(Cmpr cc)" {
void Array.sortByClosure(Cmpr cc)
}

test "int System.getTickCount()" {
int System.getTickCount()
}

test "This! Object.new()" {
This! Object.new()
}

test "This! Object.new:dictmap(Any value, ...)" {
This! Object.new:dictmap(Any value, ...)
}

test "This! Bytes.new(Int init)" {
This! Bytes.new(Int init)
}

test "String! String.new(Bytes! buf, String? enc)" {
String! String.new(Bytes! buf, String? enc)
}

test "Regex Regex.new(String! pattern, String? option)" {
Regex Regex.new(String! pattern, String? option)
}

test "This! Pair.new:init(T1 first, T2 second)" {
This! Pair.new:init(T1 first, T2 second)
}

test "This! Tuple.new:init(Any? value, ...)" {
This! Tuple.new:init(Any? value, ...)
}

test "This! Range.new:init(T1! start, T1! end)" {
This! Range.new:init(T1! start, T1! end)
}

test "This! Range.new(T1! start, T1! end)" {
This! Range.new(T1! start, T1! end)
}

test "This! Array.new(Int? initCapacity)" {
This! Array.new(Int? initCapacity)
}

test "This! Array.new:array(Int size)" {
This! Array.new:array(Int size)
}

test "This! Array.new:init(T1? value, ...)" {
This! Array.new:init(T1? value, ...)
}

test "This! IArray.new(Int? initCapacity)" {
This! IArray.new(Int? initCapacity)
}

test "This! IArray.new:array(Int! size)" {
This! IArray.new:array(Int! size)
}

test "This! IArray.new:init(Int? value, ...)" {
This! IArray.new:init(Int? value, ...)
}

test "This! IArray.new:range(Int! start, Int! end, Int? isInclusive)" {
This! IArray.new:range(Int! start, Int! end, Int? isInclusive)
}

test "This! FArray.new(Int? initCapacity)" {
This! FArray.new(Int? initCapacity)
}

test "This! FArray.new:array(Int size)" {
This! FArray.new:array(Int size)
}

test "This! FArray.new:init(Float? value, ...)" {
This! FArray.new:init(Float? value, ...)
}

test "This! DictMap.new(Int? initCapacity)" {
This! DictMap.new(Int? initCapacity)
}

test "This! DictMap.new:dictmap(T1 value, ...)" {
This! DictMap.new:dictmap(T1 value, ...)
}

test "Exception! Exception.new(String? msg, Any? bag)" {
Exception! Exception.new(String? msg, Any? bag)
}

test "This! Exception.new:init(String? e, String? msg, Object? bag)" {
This! Exception.new:init(String? e, String? msg, Object? bag)
}

test "This! Closure.new(Any! base, Method! method)" {
This! Closure.new(Any! base, Method! method)
}

test "void System.setRandomSeed(Int seed)" {
void System.setRandomSeed(Int seed)
}

test "Int! Int.random(Int? n)" {
Int! Int.random(Int? n)
}

test "Float! Float.random()" {
Float! Float.random()
}

test "Int! Float.floatToIntBits(Float! n)" {
Int! Float.floatToIntBits(Float! n)
}

test "Float! Float.intToFloatBits(Int! n)" {
Float! Float.intToFloatBits(Int! n)
}

test "Class! Object.getClass()" {
Class! Object.getClass()
}

test "Int Object.hashCode()" {
Int Object.hashCode()
}

test "Boolean! Object.isNull()" {
Boolean! Object.isNull()
}

test "Boolean! Object.isNotNull()" {
Boolean! Object.isNotNull()
}

test "String! Object.getKey()" {
String! Object.getKey()
}

test "Array! Class.domain()" {
Array! Class.domain()
}

test "Boolean! Method.isAbstract()" {
Boolean! Method.isAbstract()
}

test "String Method.getName()" {
String Method.getName()
}

test "void Method.setTrace(int trace)" {
void Method.setTrace(int trace)
}

test "T0 Closure.invoke(T1 x, T2 y, T3 z, ...)" {
T0 Closure.invoke(T1 x, T2 y, T3 z, ...)
}

test "T1 Thunk.eval()" {
T1 Thunk.eval()
}

test "T1 Thunk.value()" {
T1 Thunk.value()
}

test "Int! Object.opAddr()" {
Int! Object.opAddr()
}

test "Boolean Object.opInstanceof(Class c)" {
Boolean Object.opInstanceof(Class c)
}

test "Boolean! Object.opEq(Any value)" {
Boolean! Object.opEq(Any value)
}

test "Boolean! Object.opNeq(Any value)" {
Boolean! Object.opNeq(Any value)
}

test "Boolean! Object.opLt(Any value)" {
Boolean! Object.opLt(Any value)
}

test "Boolean! Object.opLte(Any value)" {
Boolean! Object.opLte(Any value)
}

test "Boolean! Object.opGt(Any value)" {
Boolean! Object.opGt(Any value)
}

test "Boolean! Object.opGte(Any value)" {
Boolean! Object.opGte(Any value)
}

test "Boolean! Int.opEq(Int! value)" {
Boolean! Int.opEq(Int! value)
}

test "Boolean! Int.opNeq(Int! value)" {
Boolean! Int.opNeq(Int! value)
}

test "Boolean! Int.opLt(Int! value)" {
Boolean! Int.opLt(Int! value)
}

test "Boolean! Int.opLte(Int! value)" {
Boolean! Int.opLte(Int! value)
}

test "Boolean! Int.opGt(Int! value)" {
Boolean! Int.opGt(Int! value)
}

test "Boolean! Int.opGte(Int! value)" {
Boolean! Int.opGte(Int! value)
}

test "Boolean! Float.opEq(Float value)" {
Boolean! Float.opEq(Float value)
}

test "Boolean! Float.opNeq(Float value)" {
Boolean! Float.opNeq(Float value)
}

test "Boolean! Float.opLt(Float! value)" {
Boolean! Float.opLt(Float! value)
}

test "Boolean! Float.opLte(Float! value)" {
Boolean! Float.opLte(Float! value)
}

test "Boolean! Float.opGt(Float! value)" {
Boolean! Float.opGt(Float! value)
}

test "Boolean! Float.opGte(Float! value)" {
Boolean! Float.opGte(Float! value)
}

test "Boolean! String.opHas(String! s)" {
Boolean! String.opHas(String! s)
}

test "Boolean! Pair.opHas(Any v)" {
Boolean! Pair.opHas(Any v)
}

test "Boolean! Pair.opCase(Any v)" {
Boolean! Pair.opCase(Any v)
}

test "Boolean! Range.opHas(Any v)" {
Boolean! Range.opHas(Any v)
}

test "Boolean! Range.opCase(Any v)" {
Boolean! Range.opCase(Any v)
}

test "Boolean! Array.opHas(Any v)" {
Boolean! Array.opHas(Any v)
}

test "Boolean! Array.opCase(Any v)" {
Boolean! Array.opCase(Any v)
}

test "Boolean! Tuple.opHas(Any v)" {
Boolean! Tuple.opHas(Any v)
}

test "Boolean! Tuple.opCase(Any v)" {
Boolean! Tuple.opCase(Any v)
}

test "Boolean! IArray.opHas(Any v)" {
Boolean! IArray.opHas(Any v)
}

test "Boolean! IArray.opCase(Any v)" {
Boolean! IArray.opCase(Any v)
}

test "Boolean! FArray.opHas(Any v)" {
Boolean! FArray.opHas(Any v)
}

test "Boolean! FArray.opCase(Any v)" {
Boolean! FArray.opCase(Any v)
}

test "Boolean! Object.opCase(Any v)" {
Boolean! Object.opCase(Any v)
}

test "Boolean! Int.opCase(Any v)" {
Boolean! Int.opCase(Any v)
}

test "Boolean! Float.opCase(Any v)" {
Boolean! Float.opCase(Any v)
}

test "Boolean! Object.opIs(Any v)" {
Boolean! Object.opIs(Any v)
}

test "Boolean! Object.opAs(Any o)" {
Boolean! Object.opAs(Any o)
}

test "Boolean! Object.opInTo(Class! c)" {
Boolean! Object.opInTo(Class! c)
}

test "Int! Int.opAdd(Int! v)" {
Int! Int.opAdd(Int! v)
}

test "Int! Int.opNeg()" {
Int! Int.opNeg()
}

test "Int! Int.opSub(Int! n)" {
Int! Int.opSub(Int! n)
}

test "Int! Int.opMul(Int! n)" {
Int! Int.opMul(Int! n)
}

test "Int! Int.opDiv(Int! n)" {
Int! Int.opDiv(Int! n)
}

test "Int! Int.opMod(Int! n)" {
Int! Int.opMod(Int! n)
}

test "Float! Float.opAdd(Float! v)" {
Float! Float.opAdd(Float! v)
}

test "Float! Float.opNeg()" {
Float! Float.opNeg()
}

test "Float! Float.opSub(Float! n)" {
Float! Float.opSub(Float! n)
}

test "Float! Float.opMul(Float! n)" {
Float! Float.opMul(Float! n)
}

test "Float! Float.opDiv(Float! n)" {
Float! Float.opDiv(Float! n)
}

test "String! String.opAdd(Any value)" {
String! String.opAdd(Any value)
}

test "String! String.opSub(String! s)" {
String! String.opSub(String! s)
}

test "Any Any.opAdd(Any value)" {
Any Any.opAdd(Any value)
}

test "Any Any.opSub(Any value)" {
Any Any.opSub(Any value)
}

test "Any Any.opMul(Any value)" {
Any Any.opMul(Any value)
}

test "Any Any.opDiv(Any value)" {
Any Any.opDiv(Any value)
}

test "Any Any.opMod(Any value)" {
Any Any.opMod(Any value)
}

test "Any Any.opNeg()" {
Any Any.opNeg()
}

test "Boolean! Boolean.opNot()" {
Boolean! Boolean.opNot()
}

test "Int! Int.opLand(Int! n, ...)" {
Int! Int.opLand(Int! n, ...)
}

test "Int! Int.opLor(Int! n, ...)" {
Int! Int.opLor(Int! n, ...)
}

test "Int! Int.opXor(Int! n)" {
Int! Int.opXor(Int! n)
}

test "Int! Int.opLnot()" {
Int! Int.opLnot()
}

test "Int! Int.opLshift(Int! n)" {
Int! Int.opLshift(Int! n)
}

test "Int! Int.opRshift(Int! n)" {
Int! Int.opRshift(Int! n)
}

test "Int! Int.opNext()" {
Int! Int.opNext()
}

test "Int! Int.opPrev()" {
Int! Int.opPrev()
}

test "Float! Float.opNext()" {
Float! Float.opNext()
}

test "Float! Float.opPrev()" {
Float! Float.opPrev()
}

test "Int! Int.getSize()" {
Int! Int.getSize()
}

test "Int! Float.getSize()" {
Int! Float.getSize()
}

test "Int! Bytes.getSize()" {
Int! Bytes.getSize()
}

test "Int! String.getSize()" {
Int! String.getSize()
}

test "Int! Pair.getSize()" {
Int! Pair.getSize()
}

test "Int! Tuple.getSize()" {
Int! Tuple.getSize()
}

test "Int! Range.getSize()" {
Int! Range.getSize()
}

test "Int! Array.getSize()" {
Int! Array.getSize()
}

test "Int! IArray.getSize()" {
Int! IArray.getSize()
}

test "Int! FArray.getSize()" {
Int! FArray.getSize()
}

test "Int! DictMap.getSize()" {
Int! DictMap.getSize()
}

test "Int! Bytes.get(Int! n)" {
Int! Bytes.get(Int! n)
}

test "void Bytes.set(Int! n, Int! c)" {
void Bytes.set(Int! n, Int! c)
}

test "void Bytes.setAll(Int! c)" {
void Bytes.setAll(Int! c)
}

test "String! String.get(Int! n)" {
String! String.get(Int! n)
}

test "T1! Array.get(Int! n)" {
T1! Array.get(Int! n)
}

test "Any Tuple.get(Int! n)" {
Any Tuple.get(Int! n)
}

test "Int! IArray.get(Int! n)" {
Int! IArray.get(Int! n)
}

test "Float! FArray.get(Int! n)" {
Float! FArray.get(Int! n)
}

test "void Array.set(Int! n, T1! v)" {
void Array.set(Int! n, T1! v)
}

test "void IArray.set(Int! n, Int! v)" {
void IArray.set(Int! n, Int! v)
}

test "void FArray.set(Int! n, Float! v)" {
void FArray.set(Int! n, Float! v)
}

test "void Array.setAll(T1 v)" {
void Array.setAll(T1 v)
}

test "void IArray.setAll(Int! v)" {
void IArray.setAll(Int! v)
}

test "void FArray.setAll(Float! v)" {
void FArray.setAll(Float! v)
}

test "Bytes! Bytes.opRangeUntil(Int? s, Int? e)" {
Bytes! Bytes.opRangeUntil(Int? s, Int? e)
}

test "Bytes! Bytes.opRangeTo(Int? s, Int? e)" {
Bytes! Bytes.opRangeTo(Int? s, Int? e)
}

test "String! String.substring(Int? offset, Int? length)" {
String! String.substring(Int? offset, Int? length)
}

test "String! String.opRangeUntil(Int? s, Int? e)" {
String! String.opRangeUntil(Int? s, Int? e)
}

test "String! String.opRangeTo(Int? s, Int? e)" {
String! String.opRangeTo(Int? s, Int? e)
}

test "This! Array.opRangeUntil(Int? s, Int? e)" {
This! Array.opRangeUntil(Int? s, Int? e)
}

test "This! Array.opRangeTo(Int? s, Int? e)" {
This! Array.opRangeTo(Int? s, Int? e)
}

test "This! IArray.opRangeUntil(Int? s, Int? e)" {
This! IArray.opRangeUntil(Int? s, Int? e)
}

test "This! IArray.opRangeTo(Int? s, Int? e)" {
This! IArray.opRangeTo(Int? s, Int? e)
}

test "This! FArray.opRangeUntil(Int? s, Int? e)" {
This! FArray.opRangeUntil(Int? s, Int? e)
}

test "This! FArray.opRangeTo(Int? s, Int? e)" {
This! FArray.opRangeTo(Int? s, Int? e)
}

test "This! DictMap.opRangeTo(String? s, String? e)" {
This! DictMap.opRangeTo(String? s, String? e)
}

test "This! DictMap.opRangeUntil(String? s, String? e)" {
This! DictMap.opRangeUntil(String? s, String? e)
}

test "T1! Pair.op0()" {
T1! Pair.op0()
}

test "T2! Pair.op1()" {
T2! Pair.op1()
}

test "Any Tuple.op0()" {
Any Tuple.op0()
}

test "Any Tuple.op1()" {
Any Tuple.op1()
}

test "Any Tuple.opN(Int! n)" {
Any Tuple.opN(Int! n)
}

test "T1! Array.op0()" {
T1! Array.op0()
}

test "T1! Array.op1()" {
T1! Array.op1()
}

test "T1! Array.opN(Int! n)" {
T1! Array.opN(Int! n)
}

test "Int! IArray.op0()" {
Int! IArray.op0()
}

test "Int! IArray.op1()" {
Int! IArray.op1()
}

test "Int! IArray.opN(Int! n)" {
Int! IArray.opN(Int! n)
}

test "Float! FArray.op0()" {
Float! FArray.op0()
}

test "Float! FArray.op1()" {
Float! FArray.op1()
}

test "Float! FArray.opN(Int! n)" {
Float! FArray.opN(Int! n)
}

test "InputStream InputStream.new(String! urn, String? mode)" {
InputStream InputStream.new(String! urn, String? mode)
}

test "Int! InputStream.getChar()" {
Int! InputStream.getChar()
}

test "Int! InputStream.read(Bytes! buf, Int? offset, Int? length)" {
Int! InputStream.read(Bytes! buf, Int? offset, Int? length)
}

test "String! InputStream.getEncoding()" {
String! InputStream.getEncoding()
}

test "void InputStream.setEncoding(String? enc)" {
void InputStream.setEncoding(String? enc)
}

test "Boolean! InputStream.isClosed()" {
Boolean! InputStream.isClosed()
}

test "void InputStream.close()" {
void InputStream.close()
}

test "String? InputStream.readLine()" {
String? InputStream.readLine()
}

test "Any? InputStream.readData()" {
Any? InputStream.readData()
}

test "OutputStream OutputStream.new(String! urn, String? mode)" {
OutputStream OutputStream.new(String! urn, String? mode)
}

test "void OutputStream.putChar(Int! ch)" {
void OutputStream.putChar(Int! ch)
}

test "void OutputStream.write(Bytes! buf, Int? offset, Int? length)" {
void OutputStream.write(Bytes! buf, Int? offset, Int? length)
}

test "Boolean! OutputStream.isClosed()" {
Boolean! OutputStream.isClosed()
}

test "void OutputStream.print(Any? value, ...)" {
void OutputStream.print(Any? value, ...)
}

test "void OutputStream.opAppend(Any? value, ...)" {
void OutputStream.opAppend(Any? value, ...)
}

test "void OutputStream.println(Any? value, ...)" {
void OutputStream.println(Any? value, ...)
}

test "void OutputStream.writeData(Any? data, ...)" {
void OutputStream.writeData(Any? data, ...)
}

test "void OutputStream.flush()" {
void OutputStream.flush()
}

test "void OutputStream.clearBuffer()" {
void OutputStream.clearBuffer()
}

test "void OutputStream.close()" {
void OutputStream.close()
}

test "String! OutputStream.getEncoding()" {
String! OutputStream.getEncoding()
}

test "void OutputStream.setEncoding(String? enc)" {
void OutputStream.setEncoding(String? enc)
}

test "Socket! Socket.new(String! host, Int! port)" {
Socket! Socket.new(String! host, Int! port)
}

test "InputStream! Socket.getInputStream()" {
InputStream! Socket.getInputStream()
}

test "OutputStream! Socket.getOutputStream()" {
OutputStream! Socket.getOutputStream()
}

test "void Socket.close()" {
void Socket.close()
}

test "Boolean! Socket.isClosed()" {
Boolean! Socket.isClosed()
}

test "Bytes! String.getBytes(String? enc)" {
Bytes! String.getBytes(String? enc)
}

test "Boolean! String.equals(String! s)" {
Boolean! String.equals(String! s)
}

test "Boolean! String.equals:IgnoreCase(String! s)" {
Boolean! String.equals:IgnoreCase(String! s)
}

test "Boolean! String.startsWith(String! s)" {
Boolean! String.startsWith(String! s)
}

test "Boolean! String.startsWith:IgnoreCase(String! s)" {
Boolean! String.startsWith:IgnoreCase(String! s)
}

test "Boolean! String.endsWith(String! s)" {
Boolean! String.endsWith(String! s)
}

test "Boolean! String.endsWith:IgnoreCase(String! s)" {
Boolean! String.endsWith:IgnoreCase(String! s)
}

test "Int! String.indexOf(String! s)" {
Int! String.indexOf(String! s)
}

test "Int! String.indexOf:IgnoreCase(String! s)" {
Int! String.indexOf:IgnoreCase(String! s)
}

test "Int! String.lastIndexOf(String! s)" {
Int! String.lastIndexOf(String! s)
}

test "Int! String.lastIndexOf:IgnoreCase(String! s)" {
Int! String.lastIndexOf:IgnoreCase(String! s)
}

test "String! String.concat(Any? value, ...)" {
String! String.concat(Any? value, ...)
}

test "String! String.times(Int! n)" {
String! String.times(Int! n)
}

test "PairSS String.twofold(String! s)" {
PairSS String.twofold(String! s)
}

test "String! String.format(Any? value, ...)" {
String! String.format(Any? value, ...)
}

test "String! String.replace(String! s, String! newone)" {
String! String.replace(String! s, String! newone)
}

test "Int! String.getUCS4(Int? n)" {
Int! String.getUCS4(Int? n)
}

test "String! String.toLower()" {
String! String.toLower()
}

test "String! String.toUpper()" {
String! String.toUpper()
}

test "String! String.trim()" {
String! String.trim()
}

test "String[] String.split(String delim, Int isTrim)" {
String[] String.split(String delim, Int isTrim)
}

test "Boolean! String.opMatch(Regex! re)" {
Boolean! String.opMatch(Regex! re)
}

test "Boolean! Regex.opMatch(String! s)" {
Boolean! Regex.opMatch(String! s)
}

test "String[] String.match(Regex pattern)" {
String[] String.match(Regex pattern)
}

test "InputStream! System.getIn()" {
InputStream! System.getIn()
}

test "OutputStream! System.getOut()" {
OutputStream! System.getOut()
}

test "OutputStream! System.getErr()" {
OutputStream! System.getErr()
}

test "Any? System.getProperty(String! key)" {
Any? System.getProperty(String! key)
}

test "void System.setProperty(String! key, Any? value)" {
void System.setProperty(String! key, Any? value)
}

test "void System.gc()" {
void System.gc()
}

test "void System.test(Boolean result, String? msg)" {
void System.test(Boolean result, String? msg)
}

test "Int Script.system(String cmd)" {
Int Script.system(String cmd)
}

test "Boolean! System.hasLib(String! lib, String? func)" {
Boolean! System.hasLib(String! lib, String? func)
}

test "void System.exit(Int status)" {
void System.exit(Int status)
}

test "String[] System.listDir(String? path)" {
String[] System.listDir(String? path)
}

test "Boolean! System.hasDir(String! path)" {
Boolean! System.hasDir(String! path)
}

test "Boolean! System.hasFile(String! path)" {
Boolean! System.hasFile(String! path)
}

test "Boolean! System.mkdir(String! path)" {
Boolean! System.mkdir(String! path)
}

test "Boolean! System.unlink(String! path)" {
Boolean! System.unlink(String! path)
}

test "Boolean! System.rename(String path, String newpath)" {
Boolean! System.rename(String path, String newpath)
}

test "Any Context.getProperty(String! key)" {
Any Context.getProperty(String! key)
}

test "void Context.setProperty(String! key, Any? value)" {
void Context.setProperty(String! key, Any? value)
}

test "void Context.setEncoding(String? enc)" {
void Context.setEncoding(String? enc)
}

test "String[] Context.listProperties(String key)" {
String[] Context.listProperties(String key)
}

test "void Context.setIn(InputStream? in)" {
void Context.setIn(InputStream? in)
}

test "void Context.setOut(OutputStream? out)" {
void Context.setOut(OutputStream? out)
}

test "void Context.setErr(OutputStream? out)" {
void Context.setErr(OutputStream? out)
}

test "void Context.%dump(OutputStream w, String m)" {
void Context.%dump(OutputStream w, String m)
}

test "Boolean! Exception.opInstanceof(Any msg)" {
Boolean! Exception.opInstanceof(Any msg)
}

test "void NameSpace.setConst(String! name, Any value)" {
void NameSpace.setConst(String! name, Any value)
}

test "String Iterator" {
String Iterator
}

test "String String.." {
String String..
}

test "Array Iterator" {
Array Iterator
}

test "IArray Iterator!" {
IArray Iterator!
}

test "FArray Iterator!" {
FArray Iterator!
}

test "DictMap Iterator!" {
DictMap Iterator!
}

test "DictMap String..!" {
DictMap String..!
}

test "HashMap Iterator!" {
HashMap Iterator!
}

test "HashMap T1.." {
HashMap T1..
}

test "Float Int" {
Float Int
}

test "String Int?" {
String Int?
}

test "Int Float" {
Int Float
}

test "String Float?" {
String Float?
}

test "Object String" {
Object String
}

test "Boolean String" {
Boolean String
}

test "Int String" {
Int String
}

test "Float String" {
Float String
}

test "Bytes String" {
Bytes String
}

test "String Bytes" {
String Bytes
}

test "Object Iterator!" {
Object Iterator!
}

test "Iterator Array!" {
Iterator Array!
}

test "InputStream String.." {
InputStream String..
}

